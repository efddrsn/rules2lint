import os
import json

def read_rules_file(filepath):
    """Reads the rules file and returns a list of non-empty lines."""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            # Read all lines initially, strip whitespace, and filter out empty lines
            raw_rules_lines = [line.strip() for line in f if line.strip()]
        return raw_rules_lines
    except FileNotFoundError:
        # Let the caller handle the error message for better context
        raise FileNotFoundError(f"Rules file not found at {filepath}")
    except Exception as e:
        # Let the caller handle the error message
        raise IOError(f"Error reading rules file {filepath}: {e}")


def write_eslint_config_file(output_filepath, final_rules_object, highest_severity, rule_count, processed_rule_count, untranslated_rules):
    """Writes the final eslint.config.mjs file."""
    # Delete existing config file using full path
    try:
        if os.path.exists(output_filepath):
            os.remove(output_filepath)
            print(f"Deleted existing {output_filepath}")
    except OSError as e:
        print(f"Warning: Could not delete existing {output_filepath}: {e}")

    # Check if we actually generated any rules
    if not final_rules_object:
         print(f"\nNo rule configurations were generated. Skipping writing {output_filepath}.")
         return

    try:
        # Use indent=2 for readability in the final JS file
        final_rules_js_string = json.dumps(final_rules_object, indent=2)
        # Add indentation to each line of the JSON string for proper embedding in the JS template
        indented_final_rules_js_string = "\n".join("    " + line for line in final_rules_js_string.splitlines())

    except TypeError as e:
        print(f"Error: Failed to serialize final rules to JSON: {e}")
        return

    # Construct the content for eslint.config.mjs
    final_config_content = f"""
// ESLint Flat Configuration generated by rules2lint-lite
// Documentation: https://eslint.org/docs/latest/use/configure/configuration-files
// Generated based on rules in .cursorrules

export default [
  {{
    // You might want to restrict files this applies to:
    // files: ["**/*.js", "**/*.jsx", "**/*.ts", "**/*.tsx"],

    languageOptions: {{
      ecmaVersion: "latest",
      sourceType: "module",
      // Add parser options if needed, e.g., for TypeScript
      // parserOptions: {{
      //   project: './tsconfig.json',
      // }},
    }},
    // Consider adding plugins if your rules rely on them

    rules: {indented_final_rules_js_string}
  }}
];
"""

    try:
        # Write the output file using full path
        with open(output_filepath, 'w', encoding='utf-8') as f:
            f.write(final_config_content)
        print(f"\nSuccessfully generated {output_filepath} with {rule_count} restricted syntax configurations under 'no-restricted-syntax'.")
        print(f"(Overall severity set to '{highest_severity}' based on input rules).")

        # Report statistics
        print(f"Derived from {processed_rule_count} refined rules processed.")
        if untranslated_rules:
             print(f"{len(untranslated_rules)} original rules were marked as untranslatable.")

        # Add reminder for IDE linting
        print("\n---")
        print("✅ ESLint configuration updated successfully!")
        print("❓ To see the new linting rules (squiggly lines) in your editor:")
        print("   1. **Check Settings:** Go to Settings (Ctrl+, or Cmd+,), search for 'eslint.useFlatConfig', and **ensure it's CHECKED**.")
        print("   2. **Restart Server:** Open the Command Palette (Ctrl+Shift+P or Cmd+Shift+P), type 'ESLint: Restart ESLint Server', and run it.")
        print("   3. Wait a few seconds - the ESLint extension should now detect the changes.")
        print("   (If still no errors, check the 'ESLint' section in the Output panel for clues).")
        print("---")

    except IOError as e:
        print(f"Error: Failed to write {output_filepath}: {str(e)}") 